import requests
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from PIL import Image, ImageChops, ImageFilter
import os
import time

# === CONFIGURATION ===
# Ka√ß adet soru i≈üleneceƒüini belirtin
NUM_QUESTIONS = 1

# Dosyalarƒ±n kaydedileceƒüi klas√∂r
SAVE_DIR = "C:/Users/cetin/Desktop/Grid-SekilIcindeOruntu"

# Selenium'un a√ßacaƒüƒ± yerel HTML dosyasƒ±nƒ±n yolu
LOCAL_FILE_URL = "file:///C:/Users/cetin/Desktop/WebTools/Grid-SekilIcindeOruntu.html"

# API bilgileri
API_URL = "https://bilsem.izzgrup.com/api/ai-question-generation"
HEADERS = {"Authorization": "Bearer your_token_here"} # <<< KENDƒ∞ TOKEN'INIZI Gƒ∞Rƒ∞N

# --- G√ñRSEL ƒ∞≈ûLEME AYARLARI ---
# Soru g√∂rselinin etrafƒ±na eklenecek bo≈üluk (piksel)
QUESTION_PADDING = 0
# ≈ûƒ±k g√∂rsellerinin etrafƒ±na eklenecek bo≈üluk (piksel)
CHOICE_PADDING = 0

# Soru ve ≈üƒ±klarƒ±n son boyutlarƒ±
QUESTION_TARGET_SIZE = (1200, 600)
CHOICE_TARGET_SIZE = (256, 256)

# === SETUP ===
options = webdriver.ChromeOptions()
options.add_argument("--start-maximized")
driver = webdriver.Chrome(options=options)

# Kayƒ±t klas√∂r√ºn√º olu≈ütur (varsa hata verme)
os.makedirs(SAVE_DIR, exist_ok=True)

# Web sayfasƒ±nƒ± a√ß
driver.get(LOCAL_FILE_URL)

choice_labels = ['A', 'B', 'C', 'D']

# === G√ñRSEL ƒ∞≈ûLEME FONKSƒ∞YONLARI ===

def trim_and_pad_image(image_path, padding=0):
    """
    Bir g√∂r√ºnt√ºn√ºn kenarlarƒ±ndaki arka plan rengini otomatik olarak kƒ±rpar ve
    ardƒ±ndan belirtilen miktarda bo≈üluk (padding) ekler.
    """
    try:
        img = Image.open(image_path).convert("RGB")
        # Arka plan rengini sol √ºst k√∂≈üeden al
        bg_color = img.getpixel((0, 0))
        
        # Arka plan rengiyle aynƒ± olan piksellerden bir fark g√∂r√ºnt√ºs√º olu≈ütur
        bg = Image.new(img.mode, img.size, bg_color)
        diff = ImageChops.difference(img, bg)
        
        # Farklƒ± piksellerin olduƒüu alanƒ±n sƒ±nƒ±rlayƒ±cƒ± kutusunu bul
        bbox = diff.getbbox()

        if bbox:
            # G√∂r√ºnt√ºy√º sƒ±nƒ±rlayƒ±cƒ± kutuya g√∂re kƒ±rp
            trimmed_img = img.crop(bbox)

            if padding > 0:
                # Yeni bir tuval olu≈ütur ve ortasƒ±na yapƒ±≈ütƒ±r
                new_size = (trimmed_img.width + 2 * padding, trimmed_img.height + 2 * padding)
                padded_img = Image.new(img.mode, new_size, bg_color)
                padded_img.paste(trimmed_img, (padding, padding))
                padded_img.save(image_path)
            else:
                # Sadece kƒ±rpƒ±lmƒ±≈ü halini kaydet
                trimmed_img.save(image_path)
        else:
            print(f"‚ö†Ô∏è Image '{os.path.basename(image_path)}' is empty, no trim needed.")
    except Exception as e:
        print(f"‚ùå Error while trimming/padding image '{os.path.basename(image_path)}': {e}")


def resize_and_fill_image(path, target_size, fill_color=(255, 255, 255, 255)):
    """
    Bir g√∂r√ºnt√ºy√º, en-boy oranƒ±nƒ± koruyarak hedef boyuta sƒ±ƒüacak ≈üekilde
    yeniden boyutlandƒ±rƒ±r (gerekirse b√ºy√ºt√ºr) ve bo≈üluklarƒ± belirtilen renkle doldurur.
    Varsayƒ±lan dolgu rengi beyazdƒ±r.
    """
    try:
        img = Image.open(path).convert("RGBA")

        original_ratio = img.width / img.height
        target_ratio = target_size[0] / target_size[1]

        if original_ratio > target_ratio:
            new_width = target_size[0]
            new_height = int(new_width / original_ratio)
        else:
            new_height = target_size[1]
            new_width = int(new_height * original_ratio)

        # Resmi yeni boyutlara √∂l√ßekle (LANCZOS en kaliteli filtrelerden biridir)
        resized_img = img.resize((new_width, new_height), Image.Resampling.LANCZOS)

        # Hedef boyutta yeni bir tuval olu≈ütur
        new_img = Image.new("RGBA", target_size, fill_color)

        x_offset = (target_size[0] - new_width) // 2
        y_offset = (target_size[1] - new_height) // 2
        new_img.paste(resized_img, (x_offset, y_offset), resized_img) # maske olarak kendisini kullan

        new_img.save(path)
    except Exception as e:
        print(f"‚ùå Error while resizing/filling image '{os.path.basename(path)}': {e}")


# === ANA ƒ∞≈ûLEM D√ñNG√úS√ú ===
try:
    for i in range(1, NUM_QUESTIONS + 1):
        print(f"\n--- Soru {i} i≈üleniyor ---")
        
        # Oyunun ve ≈üƒ±klarƒ±n y√ºklenmesini bekle
        try:
            wait = WebDriverWait(driver, 10)
            wait.until(EC.presence_of_element_located((By.CLASS_NAME, "option-card")))
            time.sleep(0.5) 
        except Exception:
            print(f"‚ùå Hata: Soru {i} i√ßin oyun 10 saniye i√ßinde y√ºklenemedi.")
            break 

        # --- Soru g√∂r√ºnt√ºs√ºn√º al ve i≈üle ---
        question_path = os.path.join(SAVE_DIR, f"question_{i}.png")
        question_elem = driver.find_element(By.ID, "game-grid")
        question_elem.screenshot(question_path)
        
        trim_and_pad_image(question_path, padding=QUESTION_PADDING)
        resize_and_fill_image(question_path, QUESTION_TARGET_SIZE)
        print("‚úÖ Soru g√∂rseli alƒ±ndƒ± ve i≈ülendi.")

        # --- ≈ûƒ±k g√∂rsellerini al ve i≈üle ---
        options_elements = driver.find_elements(By.CLASS_NAME, "option-card")
        option_paths = []
        for idx, opt in enumerate(options_elements[:4]):
            choice_path = os.path.join(SAVE_DIR, f"choice_{choice_labels[idx]}_{i}.png")
            opt.screenshot(choice_path)
            
            trim_and_pad_image(choice_path, padding=CHOICE_PADDING)
            resize_and_fill_image(choice_path, CHOICE_TARGET_SIZE)
            
            option_paths.append(choice_path)
        print("‚úÖ ≈ûƒ±k g√∂rselleri alƒ±ndƒ± ve i≈ülendi.")
        
        # --- Doƒüru cevabƒ± HTML'den oku ---
        correct_index = int(driver.execute_script("return document.getElementById('correctIndex').textContent;"))
        correct_path = option_paths[correct_index]
        wrong_paths = [p for j, p in enumerate(option_paths) if j != correct_index]
        print(f"‚ÑπÔ∏è Doƒüru cevap '{choice_labels[correct_index]}' olarak belirlendi.")

        # --- API'ye g√∂nder ---
        try:
            with open(question_path, 'rb') as q_img, \
                 open(correct_path, 'rb') as correct, \
                 open(wrong_paths[0], 'rb') as wrong1, \
                 open(wrong_paths[1], 'rb') as wrong2, \
                 open(wrong_paths[2], 'rb') as wrong3:

                files = {
                    "question_image": q_img, 
                    "correct_answer": correct,
                    "wrong_answer_1": wrong1, 
                    "wrong_answer_2": wrong2, 
                    "wrong_answer_3": wrong3
                }
                data = {
                    "category_id": "25",
                    "grade": "[1,2,3,4,9]", 
                    "knowledge": "0", 
                    "level": "1"
                }

                response = requests.post(API_URL, headers=HEADERS, data=data, files=files)
                response.raise_for_status() # Hata durumunda (4xx, 5xx) exception fƒ±rlat
                
                print(f"üöÄ Soru {i} API'ye ba≈üarƒ±yla g√∂nderildi. Status: {response.status_code}")
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Soru {i} API'ye g√∂nderilirken hata olu≈ütu: {e}")
            if 'response' in locals() and response is not None:
                print(f"    API Yanƒ±tƒ±: {response.text}")

        # --- Sonraki soruya ge√ß ---
        if i < NUM_QUESTIONS:
            print("... Yeni soru i√ßin butona tƒ±klandƒ± ...")
            
            # Tƒ±klamadan √∂nce mevcut ≈üƒ±klara bir referans al
            old_options = driver.find_elements(By.CLASS_NAME, "option-card")
            
            # "Yeni Oyun" butonuna tƒ±kla
            driver.find_element(By.ID, "restart-button").click()
            
            # Eski ≈üƒ±klarƒ±n DOM'dan kaldƒ±rƒ±lmasƒ±nƒ± bekle
            if old_options:
                try:
                    wait.until(EC.staleness_of(old_options[0]))
                except Exception:
                    print("...Eski ≈üƒ±klarƒ±n temizlendiƒüi doƒürulanamadƒ±, yine de devam ediliyor.")

finally:
    driver.quit()
    print("\nüéâ T√ºm sorular ba≈üarƒ±yla i≈ülendi. Program sonlandƒ±rƒ±ldƒ±.")